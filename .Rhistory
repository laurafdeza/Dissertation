border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds_onlypred$preds_mon_car %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), car_dev) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Lexical stress` = stress, `Visual prediction timing` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all")
model_preds_onlypred$preds_mon_car %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), car_dev) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Lexical stress` = stress, `Visual prediction timing` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1:2, 4:5), width = c(1.1, 1.2, 1.1, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(4:6), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 2, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds_onlypred$preds_mon_car %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), car_dev) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Lexical stress` = stress, `Visual prediction timing` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1:2, 4:5), width = c(1.1, 1.2, 1.1, 1.1)) %>%
font(., fontname = "Times", part = "all")
model_preds_onlypred$preds_mon_car %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), car_dev) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Lexical stress` = stress, `Visual prediction timing` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1:2, 4:5), width = c(1.1, 1.2, 1.1, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(3:5), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 2, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds_onlypred$preds_mon_car %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), car_dev) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Lexical stress` = stress, `Visuospatial prediction timing` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1:2, 4:5), width = c(1.1, 1.2, 1.1, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(3:5), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 2, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- mon_mods_onlypred$gca_mon_car_1 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:2, 0), paste0(0:1, 1),
paste0(0:2, 2), paste0(0:1, 3))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:2, 0), paste0(0:1, 1))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
knitr::include_graphics(
here("figs", "vision", "gca", "cont_speed_verb", "mon_gca_onlypred.png")
)
ranef_table <- mon_mods_onlypred$gca_mon_car_1 %>%
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[5] <-
c("Correlations")
ranef_table %>%
knitr::kable(format = "pandoc", align = str_tokenize("llrrrrrr"))
plogis(0)
plogis(1)
plogis(2)
plogis(4)
params <- mon_mods_onlypred$gca_mon_car_1 %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:2, 0), paste0(0:1, 1))
params$subscript <-
c(paste0(0:2, 0), paste0(0:1, 1))
params <- tibble::column_to_rownames(params, 'subscript')
params$subscript <-
c(paste0(0:2, 0), paste0(0:1, 1))
# Shortcut for inline reporting from the above table
report_row <- function(row_name) report_fixef_row(params, row_name)
# Pre-calculate intercept as proportion
b0 <- params$B[params$subscript == "00"] %>% as.numeric
b0_prop <- b0 %>% inv_logit %>% round(2) %>% remove_leading_zero
b0_prop
source(here::here("scripts", "00_load_libs.R"))
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "music", "gca", "continuous", "wm")
# Load models as lists
load(paste0(gca_mods_path, "/es_mods.Rdata"))
# Get path to saved models
gca_mods_path  <- here("mods", "music", "gca", "continuous", "wm")
# Load models as lists
load(paste0(gca_mods_path, "/ss_mods.Rdata"))
# Set path for saving figs
figs_path <- here("figs", "music", "gca")
load(paste0(gca_mods_path, "/model_preds.Rdata"))
fits_ss_pitch %>%
mutate(
Stress = if_else(condition_sum == 1, "Oxytone", "Paroxytone"),
Stress = fct_relevel(Stress, 'Paroxytone'))
model_preds$fits_ss_pitch %>%
mutate(
Stress = if_else(condition_sum == 1, "Oxytone", "Paroxytone"),
Stress = fct_relevel(Stress, 'Paroxytone'))
model_preds$fits_ss_pitch %>%
mutate(ospan_std = as.factor(ospan_std))
model_preds$fits_ss_pitch %>%
mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) +
facet_grid(pitch_dev ~ ospan_std)
model_preds$fits_ss_pitch %>%
mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) +
facet_grid(. ~ ospan_std)
model_preds$fits_ss_pitch %>%
mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = pitch_dev)) +
facet_grid(. ~ ospan_std)
model_preds$fits_ss_pitch %>%
mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = pitch_dev)) +
facet_grid(. ~ ospan_std) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35)
model_preds$fits_ss_pitch %>%
mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = pitch_dev)) +
facet_grid(. ~ ospan_std) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
# geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
# geom_line(size = 0.35) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.2)
model_preds$fits_ss_pitch %>%
mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = pitch_dev)) +
facet_grid(. ~ ospan_std) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
# geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
# geom_line(size = 0.35) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.2)
model_preds$fits_ss_pitch %>%
mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = pitch_dev)) +
facet_grid(. ~ ospan_std) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35)
model_preds$fits_ss_pitch %>%
#mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = pitch_dev)) +
facet_grid(. ~ ospan_std) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35)
model_preds$fits_ss_pitch %>%
#mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = pitch_dev)) +
facet_grid(. ~ ospan_std) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
# geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
# geom_line(size = 0.35) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.2)
model_preds$fits_ss_pitch %>%
#mutate(ospan_std = as.factor(ospan_std)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = pitch_dev)) +
facet_grid(. ~ ospan_std) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35)
install.packages('itsadug',repos='http://cran.us.r-project.org')
install.packages("itsadug")
source(here::here("scripts", "00_load_libs.R"))
allinfo <- read.csv(here::here("data", "pupurri_analysis.csv"))
allinfo$participant <- tolower(allinfo$participant)
allinfo$DELE <- as.numeric(as.character(allinfo$DELE))
allinfo$age_fluent_L2 <- as.numeric(as.character(allinfo$age_fluent_L2))
allinfo$percent_l1_week <- as.numeric(as.character(allinfo$percent_l1_week))
allinfo$percent_l2_week <- as.numeric(as.character(allinfo$percent_l2_week))
agg <- separate(data = allinfo,
col = group,
into = c("prof", "l1"),
sep = 1,
remove = FALSE) %>%
# see 00_homogeneity. Participants removed to make L2 groups homog in L2 use and prof
filter(., participant != 'ies04' & participant != 'ies17' &
participant != 'aes32' & participant != 'ies28')
agg$l1 <- str_replace(agg$l1, "es", "en")
agg$l1 <- str_replace(agg$l1, "ms", "ma")
agg$l1 <- str_replace(agg$l1, "on", "es")
# No. participants
agg %>%
group_by(., l1) %>%
tally()
# Females per group
agg %>%
group_by(., l1, gender) %>%
tally()
# Get mean AGE as a function of group + SD
agg %>%
group_by(l1) %>%
summarize(min_age = min(age),
max_age = max(age),
mean_age = mean(age),
sd_age = sd(age))
# When participants started learning the L2
agg %>%
filter(., group %in% c("ies", "aes", "ims", "ams")) %>%
group_by(., l1) %>%
summarise(., mean_AoA = mean(AoA_L2),
sd_AoA = sd(AoA_L2),
mean_fluentL2 = mean(AoA_L2),
sd_fluentL2 = sd(AoA_L2))
# When participants started learning the L2
agg %>%
filter(., group %in% c("ies", "aes", "ims", "ams")) %>%
group_by(., l1) %>%
summarise(., mean_AoA = mean(AoA_L2),
sd_AoA = sd(AoA_L2),
mean_fluentL2 = mean(AoA_L2),
sd_fluentL2 = sd(AoA_L2))
agg %>%
group_by(., l1, AoA_L2) %>%
tally()
agg %>%
filter(., l1 == 'en') %>%
group_by(., l1, AoA_L2) %>%
tally()
agg %>%
filter(., l1 == 'en', AoA_L2 < 14) %>%
# group_by(., l1, AoA_L2) %>%
tally()
# n = 25
agg %>%
filter(., l1 == 'en', AoA_L2 => 14 & AoA_L2 < 18) %>%
# group_by(., l1, AoA_L2) %>%
tally()
# n = 25
agg %>%
filter(., l1 == 'en', AoA_L2 => 14, AoA_L2 < 18) %>%
# group_by(., l1, AoA_L2) %>%
tally()
# n = 25
agg %>%
filter(., l1 == 'en' & AoA_L2 => 14 & AoA_L2 < 18) %>%
# group_by(., l1, AoA_L2) %>%
tally()
agg %>%
filter(., l1 == 'en' & AoA_L2 => 14 & AoA_L2 < 18)
agg %>%
filter(., l1 == 'en' & AoA_L2 >= 14 & AoA_L2 < 18) %>%
# group_by(., l1, AoA_L2) %>%
tally()
agg %>%
filter(., l1 == 'en' & AoA_L2 >= 18) %>%
# group_by(., l1, AoA_L2) %>%
tally()
agg %>%
filter(., l1 == 'ma', AoA_L2 < 14) %>%
# group_by(., l1, AoA_L2) %>%
tally()
agg %>%
filter(., l1 == 'ma' & AoA_L2 >= 14 & AoA_L2 < 18) %>%
# group_by(., l1, AoA_L2) %>%
tally()
agg %>%
filter(., l1 == 'ma' & AoA_L2 >= 18) %>%
# group_by(., l1, AoA_L2) %>%
tally()
source(here::here("scripts", "00_load_libs.R"))
install.packages("here")
source(here::here("scripts", "00_load_libs.R"))
install.packages("magrittr")
source(here::here("scripts", "00_load_libs.R"))
source(here::here("scripts", "01_helpers.R"))
library(grid)
library(gridExtra)
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca", "LL_changes")
load(paste0(gca_mods_path, "/gca_l2_dele_simple.Rdata"))
install.packages("devtools")
# install gazer from GitHub
remotes::install_github("dmirman/gazer")
source(here::here("scripts", "00_load_libs.R"))
source(here::here("scripts", "01_helpers.R"))
install.packages("gtools")
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca", "LL_changes")
load(paste0(gca_mods_path, "/gca_l2_dele_simple.Rdata"))
# Set path for saving figs
figs_path <- here("figs", "stress", "gca", "LL_changes")
model_preds_simple$fits_all_dele %>%
mutate(`Spanish proficiency` = as.factor(DELE_z),
#`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", 'Paroxytone'),
Stress = fct_relevel(Stress, 'Paroxytone'),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish proficiency`, fill = Stress, color = Stress)) +
facet_grid(. ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 10, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
plot.margin = margin(5.5, 20, 5.5, 5.5, "points")) #cm
load(paste0(gca_mods_path, "/model_preds_simple.Rdata"))
model_preds_simple$fits_all_dele %>%
mutate(`Spanish proficiency` = as.factor(DELE_z),
#`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", 'Paroxytone'),
Stress = fct_relevel(Stress, 'Paroxytone'),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish proficiency`, fill = Stress, color = Stress)) +
facet_grid(. ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 10, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
plot.margin = margin(5.5, 20, 5.5, 5.5, "points")) #cm
model_preds_simple$fits_all_dele %>%
mutate(`Spanish proficiency` = as.factor(DELE_z),
#`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", 'Paroxytone'),
Stress = fct_relevel(Stress, 'Paroxytone'),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English"))
model_preds_simple$fits_all_dele %>%
mutate(`Spanish proficiency` = as.factor(DELE_z),
#`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", 'Paroxytone'),
Stress = fct_relevel(Stress, 'Paroxytone'),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish proficiency`, fill = Stress, color = Stress))
model_preds_simple$fits_all_dele %>%
mutate(`Spanish proficiency` = as.factor(DELE_z),
#`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", 'Paroxytone'),
Stress = fct_relevel(Stress, 'Paroxytone'),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish proficiency`, fill = Stress, color = Stress)) +
#facet_grid(. ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35)
model_preds_simple$fits_all_dele %>%
mutate(`Spanish proficiency` = as.factor(DELE_z),
#`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", 'Paroxytone'),
Stress = fct_relevel(Stress, 'Paroxytone'),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish proficiency`, fill = Stress, color = Stress)) +
#facet_grid(. ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target")
model_preds_simple$fits_all_dele %>%
mutate(`Spanish proficiency` = as.factor(DELE_z),
#`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", 'Paroxytone'),
Stress = fct_relevel(Stress, 'Paroxytone'),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish proficiency`, fill = Stress, color = Stress)) +
#facet_grid(. ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 10, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
plot.margin = margin(5.5, 20, 5.5, 5.5, "points"))
# All three variables
dele_plot <- model_preds_simple$fits_all_dele %>%
mutate(`Spanish proficiency` = as.factor(DELE_z),
#`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", 'Paroxytone'),
Stress = fct_relevel(Stress, 'Paroxytone'),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish proficiency`, fill = Stress, color = Stress)) +
#facet_grid(. ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 10, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
plot.margin = margin(5.5, 20, 5.5, 5.5, "points")) #cm
ggsave(paste0(figs_path, "/dele_plot_simple.png"), dele_plot, width = 180,
height = 120, units = "mm", dpi = 600)
