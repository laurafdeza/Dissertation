ggsave('timecourse_mon_zero0.png',
plot = stress_p1, dpi = 600, device = "png",
path = figs_path,
height = 3.5, width = 4.5, units = 'in')
stress_p1 <- plot_data %>%
#na.omit(.) %>%
filter(., time_zero >= -5, time_zero <= 5) %>%
ggplot(., aes(x = time_zero, y = target_prop, color = cond)) +
# facet_grid(cond ~ ., labeller = as_labeller(condition_names)) +
geom_hline(yintercept = 0.5, color = 'grey40', lty = 3) +
geom_vline(xintercept = 0, color = 'grey40', lty = 3) +
geom_vline(xintercept = 4, color = 'grey40', lty = 3) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
scale_x_continuous(breaks = c(-10, 0, 10),
labels = c("-500", "0", "500")) +
scale_color_discrete(labels = c('Paroxytone\n(CANta)', 'Oxytone\n(canTÃ“)')) +
labs(y = 'Proportion of target fixations',
x = 'Time relative to target syllable offset (ms)',
color = "Stress condition",
caption = "Mean +/- 95% CI") +
annotate("text", x = 3.8, y = 0.2, label = '200ms',
angle = 90, size = 3, hjust = 0, family = 'Times') +
theme_grey(base_size = 12, base_family = "Times") +
theme(legend.position = 'bottom')
# Set path for saving figures
figs_path <- here("figs", "vision", "gca", 'cont_speed_verb')
ggsave('timecourse_mon_zero0.png',
plot = stress_p1, dpi = 600, device = "png",
path = figs_path,
height = 3.5, width = 4.5, units = 'in')
model_preds_zero0$fits_mon_verbalps %>%
mutate(`Visuospatial processing speed` = as.factor(corsi_rt),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial processing speed`, fill = Stress, color = Stress)) +
facet_grid(ospan_rt ~ .) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial processing speed') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
model_preds_zero0$fits_mon_verbalps %>%
mutate(`Visuospatial processing speed` = as.factor(corsi_rt),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial processing speed`)) +
facet_grid(ospan_rt ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial processing speed') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
# Car model
base_plot <- model_preds_zero0$fits_mon_verbalps %>%
mutate(`Visuospatial processing speed` = as.factor(corsi_rt),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial processing speed`)) +
facet_grid(ospan_rt ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial processing speed') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
library(grid)
library(gridExtra)
grid.arrange(base_plot,
bottom = textGrob('Verbal processing speed', rot = 270,
x = 0.98, y = 2.55, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
mon_gca_ospan_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Verbal processing speed', rot = 270,
x = 0.98, y = 2.4, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_ospan_zero0.png"), mon_gca_ospan_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_ospan_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Verbal processing speed', rot = 270,
x = 0.98, y = 2.5, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_ospan_zero0.png"), mon_gca_ospan_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
model_preds_zero0$fits_mon_car %>%
mutate(`Visuospatial processing speed` = as.factor(corsi_rt),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial processing speed`)) +
facet_grid(car_dev ~ Stress)
model_preds_zero0$fits_mon_car %>%
mutate(`Visuospatial processing speed` = as.factor(corsi_rt),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial processing speed`)) +
facet_grid(car_dev ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial processing speed') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
# Visuospatial ps and pred model
base_plot <- model_preds_zero0$fits_mon_car %>%
mutate(`Visuospatial processing speed` = as.factor(corsi_rt),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial processing speed`)) +
facet_grid(car_dev ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial processing speed') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
mon_gca_corsirt_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Visuospatial prediction', rot = 270,
x = 0.98, y = 2.5, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_carrt_zero0.png"), mon_gca_carrt_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_carrt_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Visuospatial prediction', rot = 270,
x = 0.98, y = 2.5, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_carrt_zero0.png"), mon_gca_carrt_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_carrt_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Visuospatial prediction', rot = 270,
x = 0.98, y = 2.55, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_carrt_zero0.png"), mon_gca_carrt_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_carrt_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Visuospatial prediction', rot = 270,
x = 0.98, y = 2.6, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_carrt_zero0.png"), mon_gca_carrt_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
model_preds_zero0$fits_mon_verbalwm %>%
mutate(`Visuospatial WM` = as.factor(corsi),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial WM`)) +
facet_grid(ospan ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial processing speed')
model_preds_zero0$fits_mon_verbalwm %>%
mutate(`Visuospatial WM` = as.factor(corsi),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial WM`)) +
facet_grid(ospan ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial WM') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
base_plot <- model_preds_zero0$fits_mon_verbalwm %>%
mutate(`Visuospatial WM` = as.factor(corsi),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial WM`)) +
facet_grid(ospan ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial WM') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
mon_gca_wmsc_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Verbal WM', rot = 270,
x = 0.98, y = 2.6, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_wmsc_zero0.png"), mon_gca_wmsc_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_wmsc_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Verbal WM', rot = 270,
x = 0.98, y = 4, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_wmsc_zero0.png"), mon_gca_wmsc_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_wmsc_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Verbal WM', rot = 270,
x = 0.98, y = 4.5, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_wmsc_zero0.png"), mon_gca_wmsc_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_wmsc_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Verbal WM', rot = 270,
x = 0.98, y = 4.4, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_wmsc_zero0.png"), mon_gca_wmsc_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_wmsc_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Verbal WM', rot = 270,
x = 0.98, y = 4.35, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_wmsc_zero0.png"), mon_gca_wmsc_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
mon_gca_wmsc_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Verbal WM', rot = 270,
x = 0.98, y = 4.3, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_wmsc_zero0.png"), mon_gca_wmsc_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
base_plot <- model_preds_zero0$fits_mon_carsc %>%
mutate(`Visuospatial WM` = as.factor(corsi),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterite"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial WM`)) +
facet_grid(car_dev ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial WM') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
mon_gca_carsc_zero0 <- grid.arrange(base_plot,
bottom = textGrob('Visuospatial prediction', rot = 270,
x = 0.98, y = 2.6, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/mon_gca_carsc_zero0.png"), mon_gca_carsc_zero0, width = 180,
height = 120, units = "mm", dpi = 600)
library("papaja")
library("officer")
library("flextable")
knitr::include_graphics(
here("figs", "vision", "gca", "cont_speed_verb", "timecourse_mon_zero0.png")
)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- mon_mods_zero0$gca_mon_ospan_int_1 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:2, 1))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
pretty_fixed_effects <- mon_mods_zero0$gca_mon_ospan_int_1 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:2, 0), paste0(0:1, 1),
paste0(0:2, 2), paste0(0:1, 3))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
View(model_preds_zero0)
model_preds_zero0$preds_mon_verbalps %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
ospan_rt = blank_same_as_last(as.character(ospan_rt))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
`Visuospatial processing speed` = corsi_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1:3, 5, 6), width = c(1.1, 1.1, 1.1, 1.2, 1.2)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(4:6), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 2, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds_zero0$preds_mon_verbalps %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
ospan_rt = blank_same_as_last(as.character(ospan_rt))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
`Visuospatial processing speed` = corsi_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1:3, 5, 6), width = c(1.1, 1.1, 1.1, 1.2, 1.2)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(4:6), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 2, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds_zero0$preds_mon_verbalps %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
ospan_rt = blank_same_as_last(as.character(ospan_rt))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
`Visuospatial processing speed` = corsi_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(2:3, 5:6), width = c(1.2, 1.2, 1.1, 1.1, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(4:6), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 2, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds_zero0$preds_mon_verbalps %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
ospan_rt = blank_same_as_last(as.character(ospan_rt))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
`Visuospatial processing speed` = corsi_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(2:3, 5:6), width = c(1.2, 1.2, 1.1, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(4:6), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 2, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds_zero0$preds_mon_verbalps %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
ospan_rt = blank_same_as_last(as.character(ospan_rt))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
`Visuospatial processing speed` = corsi_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1:3, 5:6), width = c(1.1, 1.2, 1.2, 1.1, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(4:6), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 2, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
summary(mon_mods_zero0$gca_mon_ospan_int_1)
knitr::include_graphics(
here("figs", "vision", "gca", "cont_speed_verb", "mon_gca_ospan_zero0.png")
)
params <- mon_mods_zero0$gca_mon_ospan_int_1 %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:2, 0), paste0(0:1, 1),
paste0(0:2, 2), paste0(0:1, 3))
params <- tibble::column_to_rownames(params, 'subscript')
params$subscript <-
c(paste0(0:2, 0), paste0(0:1, 1),
paste0(0:2, 2), paste0(0:1, 3))
# Shortcut for inline reporting from the above table
report_row <- function(row_name) report_fixef_row(params, row_name)
report_row('2')
report_row(2)
report_row('5')
report_row(5)
summary(mon_mods_zero0$gca_mon_corsirt_int_2)
plogis(-1)
plogis(1)
plogis(2)
plogis(3)
ranef_table <- mon_mods_zero0$gca_mon_ospan_int_1 %>%
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[5:9] <-
c("Correlations", "&nbsp;", " &nbsp;", "  &nbsp;", "   &nbsp;")
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[5:9] <-
c("Correlations", "&nbsp;")
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[5] <-
c("Correlations")
ranef_table %>%
knitr::kable(format = "pandoc", align = str_tokenize("llrrrrrr"))
