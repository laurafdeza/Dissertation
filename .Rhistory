height = 180, units = "mm", dpi = 600)
exp_plot <- grid.arrange(base_plot,
bottom = textGrob('Spanish proficiency', rot = 270,
x = 0.98, y = 4, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/exp_plot_simple_ylong.png"), exp_plot, width = 180,
height = 180, units = "mm", dpi = 600)
base_plot <- model_preds_simple$fits_all_exp %>%
mutate(`Spanish use` = as.factor(use_z),
`Spanish proficiency` = as.factor(DELE_z),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish use`)) +
facet_grid(`Spanish proficiency` ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 12, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
plot.margin = margin(5.5, 20, 5.5, 5.5, "points"))
exp_plot <- grid.arrange(base_plot,
bottom = textGrob('Spanish proficiency', rot = 270,
x = 0.98, y = 4, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/exp_plot_simple_ylong.png"), exp_plot, width = 180,
height = 180, units = "mm", dpi = 600)
base_plot <- model_preds_simple$fits_all_exp %>%
mutate(`Spanish use` = as.factor(use_z),
`Spanish proficiency` = as.factor(DELE_z),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish use`)) +
facet_grid(`Spanish proficiency` ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 14, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
plot.margin = margin(5.5, 20, 5.5, 5.5, "points"))
exp_plot <- grid.arrange(base_plot,
bottom = textGrob('Spanish proficiency', rot = 270,
x = 0.98, y = 4, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/exp_plot_simple_ylong.png"), exp_plot, width = 180,
height = 180, units = "mm", dpi = 600)
base_plot <- model_preds_simple$fits_all_exp %>%
mutate(`Spanish use` = as.factor(use_z),
`Spanish proficiency` = as.factor(DELE_z),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish use`)) +
facet_grid(`Spanish proficiency` ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 12, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
legend.text = element_text(size = 10),
plot.margin = margin(5.5, 20, 5.5, 5.5, "points"))
base_plot
base_plot <- model_preds_simple$fits_all_exp %>%
mutate(`Spanish use` = as.factor(use_z),
`Spanish proficiency` = as.factor(DELE_z),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish use`)) +
facet_grid(`Spanish proficiency` ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 12, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
legend.text = element_text(size = 12),
plot.margin = margin(5.5, 20, 5.5, 5.5, "points"))
base_plot
base_plot <- model_preds_simple$fits_all_exp %>%
mutate(`Spanish use` = as.factor(use_z),
`Spanish proficiency` = as.factor(DELE_z),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish use`)) +
facet_grid(`Spanish proficiency` ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 12, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
plot.margin = margin(5.5, 20, 5.5, 5.5, "points"))
base_plot
base_plot <- model_preds_simple$fits_all_exp %>%
mutate(`Spanish use` = as.factor(use_z),
`Spanish proficiency` = as.factor(DELE_z),
L1 = if_else(l1_sum == 1, "Mandarin Chinese", "English"),
L1 = fct_relevel(L1, "English")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Spanish use`)) +
facet_grid(`Spanish proficiency` ~ L1) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
# scale_color_brewer(palette = "Set1", name = "Condition") +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to final syllable onset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 12, base_family = "Times") + legend_adj_2 +
theme(legend.position = 'bottom', #c(0.1, 0.9)
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
plot.margin = margin(5.5, 20, 5.5, 5.5, "points"))
exp_plot <- grid.arrange(base_plot,
bottom = textGrob('Spanish proficiency', rot = 270,
x = 0.98, y = 4, gp = gpar(fontsize = 11,
fontfamily = 'Times')))
exp_plot
ggsave(paste0(figs_path, "/exp_plot_simple_ylong.png"), exp_plot, width = 180,
height = 180, units = "mm", dpi = 600)
exp_plot <- grid.arrange(base_plot,
bottom = textGrob('Spanish proficiency', rot = 270,
x = 0.98, y = 3.5, gp = gpar(fontsize = 11,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/exp_plot_simple_ylong.png"), exp_plot, width = 180,
height = 180, units = "mm", dpi = 600)
exp_plot <- grid.arrange(base_plot,
bottom = textGrob('Spanish proficiency', rot = 270,
x = 0.98, y = 3.4, gp = gpar(fontsize = 11,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/exp_plot_simple_ylong.png"), exp_plot, width = 180,
height = 180, units = "mm", dpi = 600)
source(here::here("scripts", "00_load_libs.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "use_prof", "gca")
# Load models as lists
load(paste0(gca_mods_path, "/gca_mod_mon_simple.Rdata"))
load(paste0(gca_mods_path, "/gca_en_mods_simple.Rdata"))
# Store objects in global env
list2env(gca_mod_mon_simple, globalenv())
list2env(gca_en_mods_simple, globalenv())
summary(gca_mod_mon_final)
summary(gca_en_mod_final)
stress50 <- read_csv(here("data", "clean", "stress_50ms_allparticipants.csv"))
source(here::here("scripts", "00_load_libs.R"))
stress50 <- read_csv(here("data", "clean", "stress_50ms_allparticipants.csv"))
stress50$cond <- factor(stress50$cond, levels = c("1", "2"),
labels = c("Paroxytone/Present", "Oxytone/Preterit"))
# Test plot
stress50 %>%
filter(time_zero > -10 & time_zero < 12 & l1 != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop, color = l1)) +
facet_grid(cond ~ .) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
ggtitle("Time course per verbal tense") +
xlab("Time in 50 ms bins") +
ylab("Proportion of fixations on target") +
scale_color_discrete(name="Group")
stress50 %>%
filter(time_zero > -10 & time_zero < 12 &l1 != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop, color = cond)) +
facet_grid(l1 ~ .) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
ggtitle("Time course per verbal tense") +
xlab("Time in 50 ms bins") +
ylab("Proportion of fixations on target") +
scale_color_discrete(name="Condition")
stress50$l1_letters <- factor(stress50$l1, levels = c("en", "es"),
labels = c("English speakers", "Spanish speakers"))
timecourse_en <- stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop, fill = cond, color = cond)) +
facet_grid(l1_letters ~ .) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
xlab("Time relative to offset of verbs' initial syllable (ms)") +
ylab("Proportion of fixations on the target") +
labs(caption = "Mean +/- 95% CI") +
scale_x_continuous(breaks = c(-8, -6, -4, -2, 0, 2, 4, 6, 8),
labels = c("-400", "-300", "-200", "-100", "0", "100", '200', "300", "400")) +
scale_color_discrete(name="Stress condition") +
scale_fill_discrete(name = 'Stress condition') +
theme_grey(base_size = 10, base_family = "Times") +
theme(legend.position = 'bottom')
timecourse_en
stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
xlab("Time relative to offset of verbs' initial syllable (ms)") +
ylab("Proportion of fixations on the target") +
labs(caption = "Mean +/- 95% CI") +
scale_x_continuous(breaks = c(-8, -6, -4, -2, 0, 2, 4, 6, 8),
labels = c("-400", "-300", "-200", "-100", "0", "100", '200', "300", "400")) +
#scale_color_discrete(name="Stress condition") +
#scale_fill_discrete(name = 'Stress condition') +
theme_grey(base_size = 10, base_family = "Times") #+
geom_hline(yintercept = 0.5, lty = 3)
stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) #+
stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) #+
stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
xlab("Time relative to offset of verbs' initial syllable (ms)") +
ylab("Proportion of fixations on the target") +
labs(caption = "Mean +/- 95% CI") +
scale_x_continuous(breaks = c(-8, -6, -4, -2, 0, 2, 4, 6, 8),
labels = c("-400", "-300", "-200", "-100", "0", "100", '200', "300", "400")) +
#scale_color_discrete(name="Stress condition") +
#scale_fill_discrete(name = 'Stress condition') +
theme_grey(base_size = 10, base_family = "Times") #+
stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 1, pch = 21) +
xlab("Time relative to offset of verbs' initial syllable (ms)") +
ylab("Proportion of fixations on the target") +
labs(caption = "Mean +/- 95% CI") +
scale_x_continuous(breaks = c(-8, -6, -4, -2, 0, 2, 4, 6, 8),
labels = c("-400", "-300", "-200", "-100", "0", "100", '200', "300", "400")) +
#scale_color_discrete(name="Stress condition") +
#scale_fill_discrete(name = 'Stress condition') +
theme_grey(base_size = 10, base_family = "Times") #+
stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 10) +
xlab("Time relative to offset of verbs' initial syllable (ms)") +
ylab("Proportion of fixations on the target") +
labs(caption = "Mean +/- 95% CI") +
scale_x_continuous(breaks = c(-8, -6, -4, -2, 0, 2, 4, 6, 8),
labels = c("-400", "-300", "-200", "-100", "0", "100", '200', "300", "400")) +
#scale_color_discrete(name="Stress condition") +
#scale_fill_discrete(name = 'Stress condition') +
theme_grey(base_size = 10, base_family = "Times") #+
stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
mutate(., l1_letters = fct_relevel(l1_letters, "English speakers")) %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
xlab("Time relative to offset of verbs' initial syllable (ms)") +
ylab("Proportion of fixations on the target") +
labs(caption = "Mean +/- 95% CI") +
scale_x_continuous(breaks = c(-8, -6, -4, -2, 0, 2, 4, 6, 8),
labels = c("-400", "-300", "-200", "-100", "0", "100", '200', "300", "400")) +
#scale_color_discrete(name="Stress condition") +
#scale_fill_discrete(name = 'Stress condition') +
theme_grey(base_size = 10, base_family = "Times") #+
stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
mutate(., l1_letters = fct_relevel(l1_letters, "Spanish speakers")) %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
xlab("Time relative to offset of verbs' initial syllable (ms)") +
ylab("Proportion of fixations on the target") +
labs(caption = "Mean +/- 95% CI") +
scale_x_continuous(breaks = c(-8, -6, -4, -2, 0, 2, 4, 6, 8),
labels = c("-400", "-300", "-200", "-100", "0", "100", '200', "300", "400")) +
#scale_color_discrete(name="Stress condition") +
#scale_fill_discrete(name = 'Stress condition') +
theme_grey(base_size = 10, base_family = "Times") #+
timecourse_simple <- stress50 %>%
filter(time_zero > -10 & time_zero < 10 & l1_letters != 'ma') %>%
mutate(., l1_letters = fct_relevel(l1_letters, "Spanish speakers")) %>%
ggplot(., aes(x = time_zero, y = target_prop)) +
facet_grid(l1_letters ~ cond) +
geom_vline(xintercept = 4, lty = 3) +
geom_hline(yintercept = 0.5, lty = 3) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
xlab("Time relative to offset of verbs' initial syllable (ms)") +
ylab("Proportion of fixations on the target") +
labs(caption = "Mean +/- 95% CI") +
scale_x_continuous(breaks = c(-8, -6, -4, -2, 0, 2, 4, 6, 8),
labels = c("-400", "-300", "-200", "-100", "0", "100", '200', "300", "400")) +
#scale_color_discrete(name="Stress condition") +
#scale_fill_discrete(name = 'Stress condition') +
theme_grey(base_size = 10, base_family = "Times") #+
ggsave('timecourse_simple.png',
plot = timecourse_simple, dpi = 600, device = "png",
path = here("figs", "use_prof"),
height = 4, width = 4.5, units = 'in')
ggsave('timecourse_simple.png',
plot = timecourse_simple, dpi = 600, device = "png",
path = here("figs", "use_prof"),
height = 3, width = 4.5, units = 'in')
source(here::here("scripts", "01_helpers.R"))
gca_mods_path  <- here("mods", "use_prof", "gca")
load(paste0(gca_mods_path, "/model_preds_simple.Rdata"))
list2env(model_preds_simple, globalenv())
# all variables
plot <- fits_all_en %>%
mutate(Proficiency = as.factor(DELE_z),
Proficiency = fct_relevel(Proficiency, "1", "0", "-1"),
`Spanish use` = as.factor(use_z),
Stress = if_else(condition_sum == 1, "Oxytone", "Paroxytone"),
Stress = fct_relevel(Stress, 'Paroxytone')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = Stress)) +
facet_grid(Proficiency ~ `Spanish use`) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, -2, 0, 2, 4),
labels = c("-200", "-100", "0", "100", "200")) +
labs(x = "Time (ms) relative to last syllable's onset",
y = "Empirical logit of looks to target",
lty = 'Stress condition') +
ggtitle('Spanish use') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
plot
# -----------------------------------------------------------------------------
# load data
stress_50 <- read.delim("./data/stress_50bin.txt")
# Check gaze fixation columns have different values
unique(stress_50$AVERAGE_IA_1_SAMPLE_COUNT)  # looking at target according to IA_#_ID
unique(stress_50$AVERAGE_IA_2_SAMPLE_COUNT)  # looking at distractor
unique(stress_50$AVERAGE_IA_0_SAMPLE_COUNT)  # elsewhere
# How much data we lose by selecting only accurate trials
sum( ( stress_50$ACCURACY == 0 ) / length( stress_50$ACCURACY ) )
colnames(stress_50)
pretmon <- filter(stress_50, cond == 1)
sum( ( pretmon$ACCURACY == 0 ) / length( pretmon$ACCURACY ) )
presmon <- filter(stress_50, cond == 2)
sum( ( pretmon$ACCURACY == 0 ) / length( pretmon$ACCURACY ) )
unique(stress_50$cond)
presmon <- filter(stress_50, cond == 2)
pretmon <- filter(stress_50, cond == 2)
sum( ( pretmon$ACCURACY == 0 ) / length( pretmon$ACCURACY ) )
presmon <- filter(stress_50, cond == 1)
sum( ( presmon$ACCURACY == 0 ) / length( presmon$ACCURACY ) )
# How much data we lose by selecting only accurate trials
sum( ( stress_50$ACCURACY == 0 ) / length( stress_50$ACCURACY ) ) *100
sum( ( pretmon$ACCURACY == 0 ) / length( pretmon$ACCURACY ) ) *100
acc_desc <- separate(stress_50, col = RECORDING_SESSION_LABEL,
into = c("group", "group_member"),
sep = 3,
remove = FALSE) %>%
# Tidy data -------------------------------------------------------------------
# Read data
stress_50 <- stress_50 %>%
# create variable group
separate(., col = RECORDING_SESSION_LABEL,
into = c("group", "group_member"),
sep = 3,
remove = FALSE) %>%
#select and rename variables of interest
select(., RECORDING_SESSION_LABEL, TRIAL_INDEX, BIN_INDEX,
AVERAGE_IA_0_SAMPLE_COUNT, AVERAGE_IA_0_SAMPLE_COUNT_.,
AVERAGE_IA_1_SAMPLE_COUNT, AVERAGE_IA_1_SAMPLE_COUNT_.,
AVERAGE_IA_2_SAMPLE_COUNT, AVERAGE_IA_2_SAMPLE_COUNT_.,
ACCURACY, RT, block, cond,
id, lex_freq, phonot_freq,
t01, t02, t03, t04, t05, t06, t07, target, version, group) %>%
dplyr::rename(., participant = RECORDING_SESSION_LABEL,
trial = TRIAL_INDEX,
bin = BIN_INDEX,
target_count = AVERAGE_IA_1_SAMPLE_COUNT,
target_prop = AVERAGE_IA_1_SAMPLE_COUNT_.,
offset_prev_word = t01,
onset_v1 = t02,
onset_c2 = t03,
onset_c3 = t04,
onset_v2 = t05,
offset_target = t06,
endSentence = t07,
sentence_id = id) %>%
# remove incorrect
filter(., ACCURACY == 1) %>%
# drop unused levels of factors
droplevels(.) %>%
# Create eLog variable and respective wts
mutate(.,eLog = log((target_count + 0.5) / (50 - target_count + 0.5)),
wts = 1 / (target_count + 0.5) + 1 / (50 - target_count + 0.5)) %>%
# Select necessary columns
# Gather data to prepare for bin adjustment
# Get suffix onset label and center at 0 for each
# participant for each item
dplyr::select(participant, group, target, cond, target, bin,
target_count, target_prop, eLog, wts, onset_c3) %>%
# change onset_v1 in previous line depending on what trigger we want to observe
gather(., landmark, lm_bin, -c(participant:wts)) %>%
mutate(., lm_bin = (lm_bin / 50) %>% ceiling(.),
t_onset = if_else(bin == lm_bin, TRUE, FALSE)) %>%
group_by(., participant, target) %>%
mutate(., time_zero = onset_pupil(bin, t_onset, event = c("TRUE"))) %>%
ungroup(.)
acc_desc <- separate(stress_50, col = RECORDING_SESSION_LABEL,
into = c("group", "group_member"),
sep = 3,
remove = FALSE)
View(acc_desc)
pretmon <- filter(acc_desc, cond == 2 & group == 'mon')
sum( ( pretmon$ACCURACY == 0 ) / length( pretmon$ACCURACY ) ) *100
presmon <- filter(acc_desc, cond == 1 & group == 'mon')
sum( ( presmon$ACCURACY == 0 ) / length( presmon$ACCURACY ) ) *100
pretl2 <- filter(acc_desc, cond == 2 & c('aes', 'ies') %in% group)
sum( ( pretl2$ACCURACY == 0 ) / length( pretl2$ACCURACY ) ) *100
presl2 <- filter(acc_desc, cond == 1 & c('aes', 'ies') %in% group)
sum( ( presl2$ACCURACY == 0 ) / length( presl2$ACCURACY ) ) *100
# by speaker type
mon <- filter(acc_desc, group == 'mon')
sum( ( mon$ACCURACY == 0 ) / length( mon$ACCURACY ) ) * 100
l2 <- filter(acc_desc, c('aes', 'ies') %in% group)
l2 <- filter(acc_desc, group == 'aes' | group == 'ies')
sum( ( l2$ACCURACY == 0 ) / length( l2$ACCURACY ) ) * 100
presl2 <- filter(acc_desc, cond == 1 & group == 'aes' | group == 'ies')
sum( ( presl2$ACCURACY == 0 ) / length( presl2$ACCURACY ) ) * 100
pretl2 <- filter(acc_desc, cond == 2 & group == 'aes' | group == 'ies')
sum( ( pretl2$ACCURACY == 0 ) / length( pretl2$ACCURACY ) ) * 100
pretmon <- filter(acc_desc, cond == 2 & group == 'mon')
sum( ( pretmon$ACCURACY == 0 ) / length( pretmon$ACCURACY ) ) * 100
presmon <- filter(acc_desc, cond == 1 & group == 'mon')
sum( ( presmon$ACCURACY == 0 ) / length( presmon$ACCURACY ) ) * 100
