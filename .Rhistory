mon_car_anova
# add 2-way int to intercept, linear slope, quadratic, and cubic time terms
gca_mon_car_int_0 <- update(gca_mon_car_0,    . ~ . + car_dev:stress_sum)
gca_mon_car_int_1 <- update(gca_mon_car_int_0, . ~ . + ot1:car_dev:stress_sum)
gca_mon_car_int_2 <- update(gca_mon_car_int_1, . ~ . + ot2:car_dev:stress_sum)
mon_car_int_anova <-
anova(gca_mon_car_0, gca_mon_car_int_0, gca_mon_car_int_1,
gca_mon_car_int_2)
mon_car_int_anova
mon_car_int_anova <-
anova(gca_mon_car_0, gca_mon_car_int_0, gca_mon_car_int_1,
gca_mon_car_int_2)
mon_car_int_anova
car::vif(gca_mon_car_0)
summary(gca_mon_car_0)
confint(gca_mon_car_0)
warnings()
mod_ot3 <- update(mod_ot2, . ~ . -(1 + ot1 | participant) + ot2 + (1 + ot1 | participant))
anova(mod_ot1, mod_ot2, mod_ot3)
mod_ot4 <- update(mod_ot3, . ~ . + (1 | target))
mod_ot5 <- update(mod_ot4, . ~ . -(1 | target) + (1 + ot1 | target))
anova(mod_ot3, mod_ot4, mod_ot5) #, mod_ot6)
# Base model
gca_mon_base <- mod_ot5
# add stress effect to intercept, linear slope, quadratic, and cubic time terms
gca_mon_stress_0 <- update(gca_mon_base,    . ~ . + stress_sum)
gca_mon_stress_1 <- update(gca_mon_stress_0, . ~ . + ot1:stress_sum)
gca_mon_stress_2 <- update(gca_mon_stress_1, . ~ . + ot2:stress_sum)
mon_stress_anova <-
anova(gca_mon_base, gca_mon_stress_0, gca_mon_stress_1,
gca_mon_stress_2)
mon_stress_anova
# add visuospatial anticipation effect to intercept, linear slope, quadratic, and cubic time terms
gca_mon_car_0 <- update(gca_mon_base,    . ~ . + car_dev)
gca_mon_car_1 <- update(gca_mon_car_0, . ~ . + ot1:car_dev)
gca_mon_car_2 <- update(gca_mon_car_1, . ~ . + ot2:car_dev)
mon_car_anova <-
anova(gca_mon_base, gca_mon_car_0, gca_mon_car_1,
gca_mon_car_2)
mon_car_anova
# add 2-way int to intercept, linear slope, quadratic, and cubic time terms
gca_mon_car_int_0 <- update(gca_mon_car_0,    . ~ . + car_dev:stress_sum)
gca_mon_car_int_1 <- update(gca_mon_car_int_0, . ~ . + ot1:car_dev:stress_sum)
gca_mon_car_int_2 <- update(gca_mon_car_int_1, . ~ . + ot2:car_dev:stress_sum)
mon_car_int_anova <-
anova(gca_mon_car_0, gca_mon_car_int_0, gca_mon_car_int_1,
gca_mon_car_int_2)
mon_car_int_anova
confint(gca_mon_car_0)
anova(mod_ot1, mod_ot2, mod_ot3)
anova(mod_ot3, mod_ot4, mod_ot5) #, mod_ot6)
mon_stress_anova
mon_car_anova
mon_car_int_anova
car::vif(gca_mon_car_0)
summary(gca_mon_car_0)
performance::r2_nakagawa(gca_mon_car_0, by_group = FALSE, tolerance = 1e-05)
performance::r2_nakagawa(gca_mon_car_0, by_group = FALSE, tolerance = 1e-05)
rsq::rsq(gca_mon_car_0)
rsq::rsq(gca_mon_car_0, adj = TRUE)
# save models
mod_type <- "gca_mon"
mod_spec <- c("_base",
"_stress_0", "_stress_1", "_stress_2",
"_car_0", "_car_1", "_car_2",
"_car_int_0", "_car_int_1", "_car_int_2"
)
# Store ind models in list
mon_mods_onlypred_abs <- mget(c(paste0(mod_type, mod_spec)
))
save(mon_mods_onlypred_abs,
file = here("mods", "vision", "gca", "cont_speed_verb",
"mon_mods_onlypred_abs.Rdata"))
# Create design dataframe for predictions
mon_car <- mon_vision %>%
dplyr::select(time_zero, ot1:ot2, stress_sum) %>%
distinct %>%
expand_grid(., tibble(car_dev = c(-1, 0, 1)))
# Get model predictions and SE
fits_mon_car <- predictSE(gca_mon_car_0, mon_car) %>%
as_tibble %>%
bind_cols(mon_car) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se)
# Filter preds at target syllable offset
preds_mon_car <- filter(fits_mon_car, time_zero == 4) %>%
select(stress = stress_sum, car_dev,
elog = fit, elog_lb = ymin, elog_ub = ymax) %>%
mutate(prob = plogis(elog),
prob_lb = plogis(elog_lb),
prob_ub = plogis(elog_ub))
# Save models predictions
model_preds_onlypred_abs <- mget(c('fits_mon_car',
"preds_mon_car"
))
save(model_preds_onlypred_abs,
file = here("mods", "vision", "gca", "cont_speed_verb",
"model_preds_onlypred_abs.Rdata"))
mon_vision %>%
summarise(., mean(car_dev),
sd(car_dev),
min(car_dev),
max(car_dev),
median(car_dev))
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=sd(car_dev)),
color="black", linetype="dotted", size=.5) +
geom_vline(aes(xintercept=-sd(car_dev)),
color="black", linetype="dotted", size=.5) +
scale_x_continuous(breaks=round(seq(-.40, .40, .1), 2)) +
labs(y = 'Density',
x = 'Deviation time from reappearance millisecond (0.00)') +
theme_grey(base_size = 12, base_family = "Times")
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=sd(car_dev)),
color="black", linetype="dotted", size=.5) +
# geom_vline(aes(xintercept=-sd(car_dev)),
#            color="black", linetype="dotted", size=.5) +
scale_x_continuous(breaks=round(seq(-.40, .40, .1), 2)) +
labs(y = 'Density',
x = 'Deviation time from reappearance millisecond (0.00)') +
theme_grey(base_size = 12, base_family = "Times")
mon_vision %>%
summarise(., mean(car_dev),
sd(car_dev),
min(car_dev),
max(car_dev),
median(car_dev))
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=sd(car_dev)),
color="black", linetype="dotted", size=.5) +
# geom_vline(aes(xintercept=-sd(car_dev)),
#            color="black", linetype="dotted", size=.5) +
scale_x_continuous(breaks=round(seq(-.40, .40, .1), 2)) +
labs(y = 'Density',
x = 'Deviation time from reappearance millisecond (0.00)') +
theme_grey(base_size = 12, base_family = "Times")
ggplot(mon_vision, aes(x=car_dev)) +
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=sd(car_dev)),
color="black", linetype="dotted", size=.5) +
# geom_vline(aes(xintercept=-sd(car_dev)),
#            color="black", linetype="dotted", size=.5) +
scale_x_continuous(breaks=round(seq(-.40, .40, .1), 2)) #+
plot_data <- mon_vision
plot_data %>%
#na.omit(.) %>%
filter(., time_zero >= -5, time_zero <= 5) %>%
ggplot(., aes(x = time_zero, y = target_prop, color = cond)) +
# facet_grid(cond ~ ., labeller = as_labeller(condition_names)) +
geom_hline(yintercept = 0.5, color = 'grey40', lty = 3) +
geom_vline(xintercept = 0, color = 'grey40', lty = 3) +
geom_vline(xintercept = 4, color = 'grey40', lty = 3) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
scale_x_continuous(breaks = c(-10, 0, 10),
labels = c("-500", "0", "500")) +
scale_color_discrete(labels = c('Paroxytone\n(CANta)', 'Oxytone\n(canTÓ)')) +
labs(y = 'Proportion of target fixations',
x = 'Time relative to target syllable offset (ms)',
color = "Stress condition",
caption = "Mean +/- 95% CI") +
annotate("text", x = 3.8, y = 0.2, label = '200ms',
angle = 90, size = 3, hjust = 0, family = 'Times') +
theme_grey(base_size = 12, base_family = "Times") +
theme(legend.position = 'bottom')
plot_data %>%
#na.omit(.) %>%
filter(., time_zero >= -5, time_zero <= 5) %>%
ggplot(., aes(x = time_zero, y = target_prop, color = cond)) +
# facet_grid(cond ~ ., labeller = as_labeller(condition_names)) +
geom_hline(yintercept = 0.5, color = 'grey40', lty = 3) +
geom_vline(xintercept = 0, color = 'grey40', lty = 3) +
geom_vline(xintercept = 4, color = 'grey40', lty = 3) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
scale_x_continuous(breaks = c(-10, 0, 10),
labels = c("-500", "0", "500")) +
scale_color_discrete(labels = c('Paroxytone\n(CANta)', 'Oxytone\n(canTÓ)')) +
labs(y = 'Proportion of target fixations',
x = 'Time relative to target syllable offset (ms)',
color = "Stress condition",
caption = "Mean +/- 95% CI") #+
model_preds_onlypred_abs$fits_mon_car %>%
mutate(`Visuospatial prediction` = as.factor(car_dev),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterit"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial prediction`)) +
# facet_grid(. ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial prediction') +
# theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
# Set path for saving figures
figs_path <- here("figs", "vision", "gca", 'cont_speed_verb')
ggsave(paste0(figs_path, "/mon_gca_onlypred_abs.png"), base_plot, width = 180,
height = 120, units = "mm", dpi = 600)
source(here::here("scripts", "00_load_libs.R"))
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "vision", "gca", "cont_speed_verb")
# Load models as lists
load(paste0(gca_mods_path, "/mon_mods_onlypred_abs.Rdata"))
load(paste0(gca_mods_path, "/model_preds_onlypred_abs.Rdata"))
# Set path for saving figures
figs_path <- here("figs", "vision", "gca", 'cont_speed_verb')
model_preds_onlypred_abs$fits_mon_car %>%
mutate(`Visuospatial prediction` = as.factor(car_dev),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterit"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial prediction`)) +
# facet_grid(. ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial prediction') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
# pred model
base_plot <- model_preds_onlypred_abs$fits_mon_car %>%
mutate(`Visuospatial prediction` = as.factor(car_dev),
Stress = if_else(stress_sum == -1, "Paroxytone/present", "Oxytone/preterit"),
Stress = fct_relevel(Stress, 'Paroxytone/present')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial prediction`)) +
# facet_grid(. ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.1, show.legend = F) +
geom_line(size = 0.35) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target",
lty = 'Visuospatial prediction') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
ggsave(paste0(figs_path, "/mon_gca_onlypred_abs.png"), base_plot, width = 180,
height = 120, units = "mm", dpi = 600)
mon_vision %>%
summarise(., mean(car_dev),
sd(car_dev),
min(car_dev),
max(car_dev),
median(car_dev))
# source(here::here("scripts", "02_load_data.R"))
stress50 <- read_csv(here("data", "clean", "stress_50ms_final_onsetc3updated.csv"))
vision <- read_csv("./data/clean/vision_scores_nooutliers.csv") # pred car
vision$car_dev <- abs(vision$car_dev)
vision50 <- left_join(x = stress50, y = vision, by = "participant", all.x=TRUE)
mon_vision <- filter(vision50, l1 == 'es') %>% select(-DELE, -percent_l2_week,
-prof, -group)
mon_vision <- na.omit(mon_vision)
mon_vision <- mon_vision %>%
filter(., time_zero >= -4 & time_zero <= 4) %>%
mutate(., #l1 = fct_relevel(l1, "es", "en", "ma"),
stress_sum = if_else(cond == "1", -1, 1)) %>%           # 1 = present, 2 = preterit
poly_add_columns(., time_zero, degree = 2, prefix = "ot")
mon_vision %>%
summarise(., mean(car_dev),
sd(car_dev),
min(car_dev),
max(car_dev),
median(car_dev))
mon_vision %>%
summarise(., mean(car_dev),
sd(car_dev),
min(car_dev),
max(car_dev),
median(car_dev))
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=sd(car_dev)),
color="black", linetype="dotted", size=.5)
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=sd(car_dev)),
color="black", linetype="dotted", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) + sd(car_dev)),
color="black", linetype="dotted", size=.5)
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=sd(car_dev)),
color="black", linetype="dotted", size=.5) +
geom_vline(aes(xintercept=sd(car_dev) * 2),
color="black", linetype="dotted", size=.5)
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) - sd(car_dev)),
color="black", linetype="dotted", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) + sd(car_dev)),
color="black", linetype="dotted", size=.5)
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) - sd(car_dev)),
color="black", linetype="dotted", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) + sd(car_dev)),
color="black", linetype="dotted", size=.5) +
scale_x_continuous(breaks=round(seq(-.40, .40, .1), 2)) +
labs(y = 'Density',
x = 'Deviation time from reappearance millisecond (0.00)') +
theme_grey(base_size = 12, base_family = "Times")
p <- ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) - sd(car_dev)),
color="black", linetype="dotted", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) + sd(car_dev)),
color="black", linetype="dotted", size=.5) +
scale_x_continuous(breaks=round(seq(-.40, .40, .1), 2)) +
labs(y = 'Density',
x = 'Deviation time from reappearance millisecond (0.00)') +
theme_grey(base_size = 12, base_family = "Times")
ggsave(paste0(figs_path, "/density_car_devtimes.png"), p, width = 180,
height = 120, units = "mm", dpi = 600)
ggsave(paste0(figs_path, "/density_car_devtimes.png"), p, width = 180,
height = 100, units = "mm", dpi = 600)
ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) - sd(car_dev)),
color="black", linetype="dotted", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) + sd(car_dev)),
color="black", linetype="dotted", size=.5)
p <- ggplot(mon_vision, aes(x=car_dev)) +
geom_density() +
geom_vline(aes(xintercept=mean(car_dev)),
color="black", linetype="dashed", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) - sd(car_dev)),
color="black", linetype="dotted", size=.5) +
geom_vline(aes(xintercept=mean(car_dev) + sd(car_dev)),
color="black", linetype="dotted", size=.5) +
# scale_x_continuous(breaks=round(seq(-.40, .40, .1), 2)) +
labs(y = 'Density',
x = 'Deviation time from reappearance millisecond (0.0)') +
theme_grey(base_size = 12, base_family = "Times")
ggsave(paste0(figs_path, "/density_car_devtimes.png"), p, width = 180,
height = 100, units = "mm", dpi = 600)
library("papaja")
library("officer")
library("flextable")
# Get full mod and make it pretty for the table
pretty_fixed_effects <- mon_mods_onlypred_abs$gca_mon_car_0 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:2, 0), paste0(0:1, 1))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:2, 0), paste0(0:0, 1))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds_onlypred_abs$preds_mon_car %>%
arrange(car_dev) %>%
mutate(car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Visuospatial deviation time` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub)
model_preds_onlypred_abs$preds_mon_car %>%
arrange(car_dev) %>%
mutate(car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Visuospatial deviation time` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all")
model_preds_onlypred_abs$preds_mon_car %>%
arrange(car_dev) %>%
mutate(car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Visuospatial deviation time` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., width = c(1.2, 1.1, 1.2, 1.2))
model_preds_onlypred_abs$preds_mon_car %>%
arrange(car_dev) %>%
mutate(car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Visuospatial deviation time` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., width = c(1.3, 1.1, 1.2, 1.2)) %>% #j = c(1:2, 4:5),
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(2:4), digits = 2) %>%
fontsize(., size = 11)
model_preds_onlypred_abs$preds_mon_car %>%
arrange(car_dev) %>%
mutate(car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Visuospatial deviation time` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., width = c(1.4, 1.1, 1.2, 1.2)) %>% #j = c(1:2, 4:5),
font(., fontname = "Times", part = "all") %>%
colformat_num(., j = c(2:4), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 1, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds_onlypred_abs$preds_mon_car %>%
arrange(car_dev) %>%
mutate(car_dev = blank_same_as_last(as.character(car_dev))) %>%
select(`Visuospatial deviation time` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., width = c(1.5, 1.1, 1.2, 1.2)) %>% #j = c(1:2, 4:5),
font(., fontname = "Times", part = "all") %>%
colformat_double(., j = c(2:4), digits = 2) %>%
fontsize(., size = 11) %>%
align(., j = 1, align = "right", part = "body") %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
knitr::include_graphics(
here("figs", "vision", "gca", "cont_speed_verb", "mon_gca_onlypred_abs.png")
)
ranef_table <- mon_mods_onlypred_abs$gca_mon_car_0 %>%
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[5] <-
c("Correlations")
ranef_table %>%
knitr::kable(format = "pandoc", align = str_tokenize("llrrrrrr"))
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[5:6] <-
c("Correlations", " ")
ranef_table %>%
knitr::kable(format = "pandoc", align = str_tokenize("llrrrrrr"))
plogis(1)
plogis(-2)
plogis(0)
plogis(2)
plogis(4)
