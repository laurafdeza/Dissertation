Proficiency = fct_relevel(Proficiency, "1", "0", "-1"),
Stress = if_else(stress_sum == -1, "Paroxytone", "Oxytone"),
Stress = fct_relevel(Stress, 'Paroxytone'),
`Verbal RT` = as.factor(ospan_rt)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Verbal RT`)) +
facet_grid(Proficiency ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 0.5) +
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon', size = 0.5,
#              pch = 21, alpha = 0.5) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", 'dotted', 'dashed')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
ggtitle('Stress condition') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
# Save plots
ggsave(paste0(figs_path, "/mon_gca_car.png"), mon_car, width = 180,
height = 120, units = "mm", dpi = 600)
## Visuospatial RT
plot3 <- model_preds$fits_ma_corsi %>%
mutate(Proficiency = as.factor(prof_std),
Proficiency = fct_relevel(Proficiency, "1", "0", "-1"),
Stress = if_else(stress_sum == -1, "Paroxytone", "Oxytone"),
Stress = fct_relevel(Stress, 'Paroxytone'),
`Visuospatial RT` = as.factor(corsi_rt)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = `Visuospatial RT`)) +
facet_grid(Proficiency ~ Stress) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 0.5) +
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon', size = 0.5,
#              pch = 21, alpha = 0.5) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", 'dotted', 'dashed')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
ggtitle('Stress condition') +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
ma_corsi <- grid.arrange(plot3,
bottom = textGrob('Proficiency', rot = 270,
x = .97, y = 4.3, gp = gpar(fontsize = 9,
fontfamily = 'Times')))
ggsave(paste0(figs_path, "/en_gca_ospan.png"), en_ospan, width = 180,
height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/ma_car.png"), ma_car, width = 180,
# ggsave(paste0(figs_path, "/ma_car.png"), ma_car, width = 180,
#        height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/ma_prof.png"), ma_prof, width = 180,
ggsave(paste0(figs_path, "/mon_gca_corsi.png"), mon_corsi, width = 180,
height = 120, units = "mm", dpi = 600)
ggsave(paste0(figs_path, "/mon_gca_ospan.png"), mon_ospan, width = 180,
height = 120, units = "mm", dpi = 600)
ggsave(paste0(figs_path, "/en_gca_car.png"), en_car, width = 180,
height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/ma_gca_car.png"), plot6, width = 180,
#        height = 120, units = "mm", dpi = 600)
ggsave(paste0(figs_path, "/ma_gca_corsi.png"), ma_corsi, width = 180,
height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/ma_car.png"), ma_car, width = 180,
#        height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/ma_car.png"), ma_car, width = 180,
#        height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/ma_prof.png"), ma_prof, width = 180,
#        height = 120, units = "mm", dpi = 600)
knitr::include_graphics(
here("figs", "vision", "gca", "continuous_speed", "verb", "en_gca_ospan.png")
)
## Stress
model_preds$fits_en_ospan %>% #en_stress <-
mutate(Proficiency = as.factor(prof_std),
Proficiency = fct_relevel(Proficiency, "1", "0", "-1"),
Stress = if_else(stress_sum == -1, "Paroxytone", "Oxytone"),
Stress = fct_relevel(Stress, 'Paroxytone'),
`Verbal RT` = as.factor(ospan_rt)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = Stress)) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
# geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 0.8) +
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon', size = 0.5,
#              pch = 21, alpha = 0.5) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
knitr::include_graphics(
here("figs", "vision", "gca", "continuous_speed", "verb", "en_gca_car.png")
)
knitr::include_graphics(
here("figs", "vision", "gca", "continuous_speed", "verb", "ma_gca_car.png")
)
knitr::include_graphics(
here("figs", "vision", "gca", "continuous_speed", "verb", "ma_gca_corsi.png")
)
## Proficiency
model_preds$fits_ma_corsi %>% # ma_prof <-
mutate(Proficiency = as.factor(prof_std),
Proficiency = fct_relevel(Proficiency, "1", "0", "-1"),
Stress = if_else(stress_sum == -1, "Paroxytone", "Oxytone"),
Stress = fct_relevel(Stress, 'Paroxytone'),
`Visuospatial RT` = as.factor(corsi_rt)) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
lty = Proficiency)) +
geom_hline(yintercept = 0, size = .5, color = "grey40", linetype = 'dotted') +
geom_vline(xintercept = 4, size = .5, color = "grey40", linetype = 'dotted') +
# geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 0.8) +
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon', size = 0.5,
#              pch = 21, alpha = 0.5) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_linetype_manual(values=c("solid", "dashed", 'dotted')) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_grey(base_size = 10, base_family = "Times") +
theme(
legend.position = 'bottom',
plot.title = element_text(size = 9, hjust = 0.5),
plot.margin = margin(t = 5, l = 5, r = 24))
library(tidyverse); library(TOSTER)
n(unique(en_vision$participant))
count(unique(en_vision$participant))
unique(en_vision$participant)
unique(ma_vision$participant)
knitr::include_graphics(
here("figs", "vision", "gca", "continuous_speed", "verb", "mon_gca_ospan.png")
)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- mon_mods$gca_mon_corsirt_int_3 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- mon_mods$gca_mon_corsirt_int_3 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:3, 1)#,
# paste0(0:3, 2), paste0(0:3, 3),
# paste0(0:3, 4), paste0(0:3, 5),
# paste0(0:3, 6)
)
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
params <- mon_mods$gca_mon_car_int_1 %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:3, 0), paste0(0:3, 1))
model_preds$preds_mon_ospan %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")
# ,
# group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')
) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1, 2, 3, 4, 5), width = c(1.1, 1.3, 1.1, 1.3, 1.3)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$preds_mon_ospan %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")
# ,
# group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')
) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1, 2, 3, 4, 5), width = c(1.1, 1.3, 1.1, 1.3, 1.3)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., round(2)) %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$preds_mon_ospan %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")
# ,
# group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')
) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1, 2, 3, 4, 5), width = c(1.1, 1.3, 1.1, 1.3, 1.3)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_double(., digits = 2) %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$preds_mon_ospan %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")
# ,
# group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')
) %>%
arrange(desc(stress), ospan_rt) %>%
mutate(stress = blank_same_as_last(as.character(stress))) %>%
select(`Lexical stress` = stress, #`Visual prediction timing` = car_dev,
`Verbal processing speed` = ospan_rt,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1, 2, 3, 4, 5), width = c(1.1, 1.3, 1.1, 1.3, 1.3)) %>%
font(., fontname = "Times", part = "all") %>%
colformat_num(., digits = 2) %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$preds_en_car %>%
mutate(stress = if_else(stress == -1, "paroxytone", "oxytone")) %>%
arrange(desc(stress), prof_std, car_dev) %>%
mutate(stress = blank_same_as_last(as.character(stress)),
prof_std = blank_same_as_last(prof_std)) %>%
select(`Lexical stress` = stress, Proficiency = prof_std,
`Visual prediction timing` = car_dev,
Probability = prob, `Lower bound` = prob_lb,
`Upper bound` = prob_ub) %>%
flextable() %>%
padding(padding = 0, part = "all") %>%
width(., j = c(1, 3, 4, 5, 6), width = c(1.1, 1.3, 1.1, 1.3, 1.3)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
align(j = 2, align = "right", part = "body") %>%
colformat_num(., j = c(4, 5, 6), digits = 2) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
length(unique(ma_vision$participant))
length(unique(en_vision$participant))
unique(ma_vision$participant)
unique(dem_all$participant)
demographics <- read_csv(here::here("data", "pupurri_analysis.csv"))
unique(demographics$participant)
unique(en_vision$participant)
wm <- read_csv('./data/clean/wm_processing_speed.csv')
demographics$participant <- tolower(demographics$participant)
dem_all <- merge(demographics, wm, by = 'participant')
unique(dem_all$participant)
dem_all <- dem_all %>%
# separate(., col = participant,
#          into = c('group', 'id'),
#          sep = 3,
#          remove = FALSE) %>%
separate(., col = group,
into = c("proficiency", "l1"), # es = EN speaker, ms = MA speaker, on = ES speaker
sep = 1,
remove = FALSE)
dem_all$l1 <- str_replace(dem_all$l1, "es", "en")
dem_all$l1 <- str_replace(dem_all$l1, "ms", "ma")
dem_all$l1 <- str_replace(dem_all$l1, "on", "es")
dem_all$DELE <- as.numeric(as.character(dem_all$DELE))
dem_all$percent_l2_week <- as.numeric(as.character(dem_all$percent_l2_week))
dem_all %>%
group_by(l1) %>%
summarize(n = n()) # en = English speakers, ma = Mandarin Chinese speakers, es = Spanish speakers
library(tidyverse); library(TOSTER)
unique(ma_vision$participant)
dem_all %>%
filter(l1 != "es" & participant != 'ies04' & participant != 'ies17' &
participant != 'aes32' & participant != 'ies28' & participant != 'ams09') %>%
group_by(., l1) %>%
summarise(mean_perc_week_Spa = mean(percent_l2_week),
sd_perc_week_Spa = sd(percent_l2_week),
mean_DELE = mean(DELE),
sd_DELE = sd(DELE),
n = length(unique(participant))) %>%
knitr::kable()
# Proficiency equivalence test (w/o ams09)
TOSTtwo(m1 = 38.97, sd1 = 8.05, n1 = 61, # EN
m2 = 39.16, sd2 = 7.62, n2 = 63, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# w/o
TOSTtwo(m1 = 34.84, sd1 = 16.91, n1 = 61, # EN
m2 = 41.51, sd2 = 21.81, n2 = 63, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
dem_all %>%
filter(l1 != "es" & participant != 'ies04' & participant != 'ies17' &
participant != 'aes32' & participant != 'ies28' & participant != 'ams09') %>%
summarise(mean_perc_week_Spa = mean(percent_l2_week),
sd_perc_week_Spa = sd(percent_l2_week),
mean_DELE = mean(DELE),
sd_DELE = sd(DELE),
n = length(unique(participant))) %>%
knitr::kable()
dem_all$age_fluent_L2 <- as.numeric(dem_all$age_fluent_L2)
dem_all %>%
filter(l1 != "es" & participant != 'ies04' & participant != 'ies17' &
participant != 'aes32' & participant != 'ies28' & participant != 'ams09') %>%
group_by(l1) %>%
summarise(mean_AoA = mean(AoA_L2),
sd_AoA = sd(AoA_L2),
mean_fluent = mean(age_fluent_L2),
sd_fluent = sd(age_fluent_L2),
mean_abroad = mean(mo_ES_country),
sd_abroad = sd(mo_ES_country),
n = length(unique(participant)))
dem_all %>%
filter(l1 != "es" & participant != 'ies04' & participant != 'ies17' &
participant != 'aes32' & participant != 'ies28' & participant != 'ams09') %>%
group_by(l1) %>%
summarise(mean_AoA = mean(AoA_L2),
sd_AoA = sd(AoA_L2),
mean_fluent = mean(age_fluent_L2),
sd_fluent = sd(age_fluent_L2),
mean_abroad = mean(mo_ES_country),
sd_abroad = sd(mo_ES_country),
n = length(unique(participant)))
# without ams09
TOSTtwo(m1 = 38.1, sd1 = 34.0, n1 = 61, # EN
m2 = 40.7, sd2 = 45.8, n2 = 63, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
dem_all %>%
filter(participant != 'ies04' & participant != 'ies17' &
participant != 'aes32' & participant != 'ies28' & participant != 'ams09') %>%
group_by(., l1) %>%
summarise( ospan_mean = round(mean(ospan_rt),2),
ospan_sd = round(sd(ospan_sd),2),
corsi_mean = round(mean(corsi_rt),2),
corsi_sd = round(sd(corsi_sd),2),
n = length(unique(participant))) %>%
knitr::kable()
View(dem_all)
verbal_wm <- read_csv(here("data", 'pupurri_analysis.csv'))
agg <- separate(data = verbal_wm,
col = group,
into = c("prof", "l1"),
sep = 1,
remove = FALSE)
ospan_stats_group <- agg %>%
group_by(l1) %>%
summarize(ospan_mean = mean(WM_set),
ospan_sd = sd(WM_set))
print(ospan_stats_group)
agg <- agg %>% mutate(ospan_mean = case_when(
l1 == 'es' ~ 8.89,
l1 == 'ms' ~ 7.78,
l1 == 'on' ~ 6.2),
ospan_sd = case_when(
l1 == 'es' ~ 2.11,
l1 == 'ms' ~ 2.14,
l1 == 'on' ~ 2.72
)) %>%
mutate(ospan = (WM_set - ospan_mean)/ospan_sd)
ver_wm <- agg %>% select(., participant, ospan)
ver_wm$participant <- tolower(ver_wm$participant)
ver_wm %>%
filter(participant != 'ies04' & participant != 'ies17' &
participant != 'aes32' & participant != 'ies28' & participant != 'ams09') %>%
group_by(., l1) %>%
summarise( ospan_mean = round(mean(ospan_rt),2),
ospan_sd = round(sd(ospan_sd),2) %>%
knitr::kable()
)
ver_wm %>& filter(participant != 'ies04' & participant != 'ies17' &
participant != 'aes32' & participant != 'ies28' & participant != 'ams09') %>%
group_by(., l1) %>%
summarise( ospan_mean = round(mean(ospan_rt),2),
ospan_sd = round(sd(ospan_sd),2)) %>%
knitr::kable()
View(ver_wm)
vis_wm <- read_csv(here("data", 'clean', 'corsi.csv'))
vis_wm$subject_id <- str_replace(vis_wm$subject_id, "ae", "aes")
vis_wm$subject_id <- str_replace(vis_wm$subject_id, "ie", "ies")
vis_wm$subject_id <- str_replace(vis_wm$subject_id, "am", "ams")
vis_wm$subject_id <- str_replace(vis_wm$subject_id, "im", "ims")
vis_wm$subject_id <- str_replace(vis_wm$subject_id, "mo", "mon")
agg_vis <- vis_wm %>%
select(., -X1) %>%
rename(., participant = subject_id) %>%
separate(., col = participant,
into = c('group', 'id'),
sep = 3,
remove = FALSE) %>%
separate(., col = group,
into = c("prof", "l1"),
sep = 1,
remove = FALSE)
corsi_stats_group <- agg_vis %>%
group_by(l1) %>%
summarize(corsi_mean = mean(corsi_pt),
corsi_sd = sd(corsi_pt))
print(corsi_stats_group)
agg_vis <- agg_vis %>% mutate(corsi_mean = case_when(
l1 == 'es' ~ 4.77,
l1 == 'ms' ~ 4.5,
l1 == 'on' ~ 4.68),
corsi_sd = case_when(
l1 == 'es' ~ 1.16,
l1 == 'ms' ~ 1.02,
l1 == 'on' ~ 1.04
)) %>%
mutate(corsi = (corsi_pt - corsi_mean)/corsi_sd)
vis_wm <- agg_vis %>% select(., participant, corsi)
View(vis_wm)
# Load packages
library(data.table)
# Load visuospatial WM data and bind them into one dataframe
csv_files <- list.files (path       = "./data/corsi",
pattern    = "*.csv",
full.names = T)
corsi_speed <- as_tibble (rbindlist (lapply (csv_files, fread)))
# Select correct trials, rename participants' IDs and participant column
corsi_speed <- corsi_speed %>%
filter(., correct == 1) %>%
rename(., participant = subject_id)
corsi_speed$participant <- str_replace(corsi_speed$participant, "ae", "aes")
corsi_speed$participant <- str_replace(corsi_speed$participant, "ie", "ies")
corsi_speed$participant <- str_replace(corsi_speed$participant, "am", "ams")
corsi_speed$participant <- str_replace(corsi_speed$participant, "im", "ims")
corsi_speed$participant <- str_replace(corsi_speed$participant, "mo", "mon")
# Find random effects for each participant
corsi_glm <- lmer(time ~ level + (1 | participant),
data = corsi_speed)
corsi_ranef <- ranef(corsi_glm) %>% as_tibble()
corsi_sel <- corsi_ranef %>%
select(., grp, condval, condsd) %>%
rename(., participant = grp,
corsi_rt = condval,
corsi_sd = condsd)
View(corsi_sel)
# Load data
csv_files <- list.files (path       = "./data/ospan",
pattern    = "*.csv",
full.names = T)
ospan_speed <- as_tibble (rbindlist (lapply (csv_files, fread)))
# Select correct trials, rename participants' IDs
ospan_speed <- ospan_speed %>%
filter(., correct_resp == 1)
ospan_speed$subject_id <- str_replace(ospan_speed$subject_id, "ae", "aes")
ospan_speed$subject_id <- str_replace(ospan_speed$subject_id, "ie", "ies")
ospan_speed$subject_id <- str_replace(ospan_speed$subject_id, "am", "ams")
ospan_speed$subject_id <- str_replace(ospan_speed$subject_id, "im", "ims")
ospan_speed$subject_id <- str_replace(ospan_speed$subject_id, "mo", "mon")
# Calculate random effects for each participant
ospan_glm <- lmer(rt_formula ~ seq_length + (1 | subject_id),
data = ospan_speed)
ospan_ranef <- ranef(ospan_glm) %>% as_tibble()
ospan_sel <- ospan_ranef %>%
select(., grp, condval, condsd) %>%
rename(., participant = grp,
ospan_rt = condval,
ospan_sd = condsd)
View(ospan_sel)
View(ospan_speed)
View(ospan_speed)
